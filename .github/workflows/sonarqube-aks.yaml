name: Security Scan

on:
  pull_request:
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2AM UTC
  workflow_dispatch:

jobs:
  security-tools:
    name: Security Analysis
    runs-on: ubuntu-latest
    outputs:
        cache: ${{ steps.cache-key.outputs.key }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache-key
        run: echo "key=security-${{ github.sha }}-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache security artifacts
        uses: actions/cache@v4
        with:
          path: |
            security-env
            bin
            *.sarif
            coverage
          key: ${{ steps.cache-key.outputs.key }}

      # ----- Setup Node.js for test coverage -----
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'npm'

      # ----- Install dependencies and handle coverage -----
      - name: Install dependencies and generate coverage
        run: |
          npm ci
          mkdir -p coverage
          # Create minimal valid LCOV file since no tests exist
          echo "TN:" > coverage/lcov.info
          echo "SF:src/index.ts" >> coverage/lcov.info
          echo "LH:0" >> coverage/lcov.info
          echo "LF:0" >> coverage/lcov.info
          echo "end_of_record" >> coverage/lcov.info
        continue-on-error: true

      # ----- Setup Python environment -----
      - name: Setup Python Environment
        run: |
          python3 -m venv security-env
          source security-env/bin/activate
          pip install --upgrade pip
          pip install --disable-pip-version-check bandit[sarif]==1.7.9 semgrep==1.88.0

      # ----- Install security tooling -----
      - name: Install Bandit, Semgrep, Trivy
        run: |

          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b ./bin
          echo "$(pwd)/bin" >> $GITHUB_PATH

      # ----- Python SAST (if any Python files exist) -----
      - name: Bandit Security Scan
        run: |
          source security-env/bin/activate
          if find . -name "*.py" -not -path "./node_modules/*" | head -1 | grep -q .; then
            bandit -r . -ll -ii -f sarif -o bandit.sarif --exclude ./node_modules || true
          else
            echo "No Python files found, skipping Bandit"
            echo '{"runs": []}' > bandit.sarif
          fi
        continue-on-error: true

      # ----- Security rules (multi-language) -----
      - name: Semgrep Security Scan
        run: |
          source security-env/bin/activate
          semgrep ci --config p/ci --sarif --output semgrep.sarif || true

      # ----- Dependency and config scans -----
      - name: Trivy FileSystem Scan
        run: |
          trivy fs . --exit-code 0 --severity HIGH,CRITICAL --format sarif --output trivy-fs.sarif --timeout 10m --scanners vuln --skip-dirs node_modules,build,dist || echo '{"version":"2.1.0","runs":[]}' > trivy-fs.sarif
        continue-on-error: true
        timeout-minutes: 10

      - name: Trivy Config Scan
        run: |
          trivy config . --exit-code 0 --severity HIGH,CRITICAL --format sarif --output trivy-config.sarif --timeout 5m \
            --skip-dirs node_modules,build,dist || echo '{"version":"2.1.0","runs":[]}' > trivy-config.sarif
        continue-on-error: true
        timeout-minutes: 8

      # ----- Container Security Scan -----
      - name: Docker Image Security Scan
        run: |
          docker build -t mcp-server:${{ github.sha }} .
          trivy image mcp-server:${{ github.sha }} --exit-code 0 --severity HIGH,CRITICAL --format sarif --output trivy-image.sarif --timeout 10m || echo '{"version":"2.1.0","runs":[]}' > trivy-image.sarif
          docker rmi mcp-server:${{ github.sha }} || true
        continue-on-error: true
        timeout-minutes: 12

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: security-tools
    strategy:
        matrix:
            instance:
                - name: "DO"
                  token: "SONAR_TOKEN_APP"
                  url: "http://sonarqube.tokenmetrics.com"
                - name: "AKS"
                  token: "SONAR_AKS_TOKEN"
                  url: "http://sonarqube-aks.tokenmetrics.com"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore security artifacts
        uses: actions/cache@v4
        with:
          path: |
            security-env
            bin
            *.sarif
            coverage
          key: ${{ needs.security-tools.outputs.cache-key }}

      # ----- SonarQube Analysis -----
      - name: SonarQube Scan - ${{ matrix.instance.name }}
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets[matrix.instance.token] }}
          SONAR_HOST_URL: ${{ matrix.instance.url }}
        with:
          args: |
            -Dsonar.sarifReportPaths=semgrep.sarif,trivy-fs.sarif,trivy-config.sarif,bandit.sarif
            -Dsonar.projectKey=mcp
            -Dsonar.projectName=mcp
            -Dsonar.projectVersion=${{ github.sha }}
            -Dsonar.sources=src
            -Dsonar.typescript.tsconfigPath=tsconfig.json
            -Dsonar.javascript.node.maxspace=4096
            -Dsonar.exclusions=**/node_modules/**,**/build/**,**/dist/**,scripts/**,k8s-manifests/**,argocd/**,*.sh,tree.txt,glama.json,mcp-config.json
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true

      # ----- Quality Gate Check -----
      - name: SonarQube Quality Gate - ${{ matrix.instance.name }}
        uses: SonarSource/sonarqube-quality-gate-action@v1
        id: sonarqube-quality-gate
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets[matrix.instance.token] }}
          SONAR_HOST_URL: ${{ matrix.instance.url }}

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest-l-s
    needs: [security-tools, sonarqube-analysis]
    if: always()

    steps:

      # ----- Security Report Summary -----
      - name: Security Report Summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Tools Used:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Semgrep (TypeScript/JavaScript Security)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Trivy (Dependencies & Config)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SonarQube (Code Quality & Security)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          echo "- SonarQube Quality Gate: ${{ steps.sonarqube-quality-gate.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- View detailed results on DO at: http://sonarqube.tokenmetrics.com/dashboard?id=mcp" >> $GITHUB_STEP_SUMMARY
          echo "- View detailed results on AKS at: http://sonarqube-aks.tokenmetrics.com/dashboard?id=mcp" >> $GITHUB_STEP_SUMMARY

      # ----- Cleanup Virtual Environment -----
      - name: Cleanup
        if: always()
        run: |
          rm -f *.sarif || true
          rm -rf security-env
          docker system prune -f || true