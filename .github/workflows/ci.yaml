name: MCP CI Pipeline
run-name: ${{ github.workflow }} triggered by @${{ github.actor }} for ${{ github.event.head_commit.message }} from ${{ github.ref_name }}
on:
  push:
    branches:
      - staging # staging
      - development # alpha
  pull_request:
    branches:
      - staging
      - development
  workflow_dispatch:

jobs:
  unit-test:
    runs-on: ubuntu-latest-m
    steps:
      - name: "Checkout repository on branch: ${{ github.REF }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.HEAD_REF }}
          fetch-depth: 0

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: npm ci .

      - name: Lint code
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: npm run lint

  write-creds-from-secrets:
    name: "Write env from secrets"
    runs-on: ubuntu-latest-m
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Get branch names.
        id: branch-names
        uses: tj-actions/branch-names@v8

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          access_token_lifetime: 1200s

      - name: Retrieve .env file from Secret Manager
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@v1
        with:
          secrets: |
            alpha-env:tmgalaxy/tokenmetrics-alpha-env
            staging-env:tmgalaxy/tokenmetrics-staging-env
            prod-env:tmgalaxy/tokenmetrics-prod-env
      - name: Create .env file production
        if: ${{ steps.branch-names.outputs.ref_branch == 'main' }}
        run: |
          echo '${{ steps.secrets.outputs.prod-env }}' > .env
          echo 'PR_PIPELINE=true' >> .env

      - name: Create .env file staging
        if: ${{ steps.branch-names.outputs.ref_branch == 'staging'}}
        run: |
          echo '${{ steps.secrets.outputs.staging-env }}' > .env
          echo 'PR_PIPELINE=true' >> .env

      - name: debug env
        run: cat .env

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: creds-artifact
          path: |
            .env
          include-hidden-files: true
  docker-build-and-push:
    name: "Docker Build and Push"
    runs-on: ubuntu-latest-m
    timeout-minutes: 60
    needs: [write-creds-from-secrets]
    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: creds-artifact
          path: ./

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Set Docker tag
        id: set_tag
        run: |
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "TAG=prod-${GITHUB_SHA::7}" >> $GITHUB_ENV
          elif [ "${GITHUB_REF_NAME}" = "development" ]; then
            echo "TAG=alpha-${GITHUB_SHA::7}" >> $GITHUB_ENV
          elif [ "${GITHUB_REF_NAME}" = "staging" ]; then
            echo "TAG=staging-${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            echo "TAG=latest-${GITHUB_SHA::7}" >> $GITHUB_ENV
          fi
          echo "Docker tag: $TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: us-central1-docker.pkg.dev/tmgalaxy/tm-de-artifact/tm-front:${{ env.TAG }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-args: |
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
          secrets: |
            "turbo_token=${{ secrets.TURBO_TOKEN }}"
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_INLINE_CACHE: 1

      - name: Update values.yaml with image tag
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        run: |
          BRANCH_NAME=${{ (github.ref_name == 'main' && 'prod' || github.ref_name == 'development' && 'alpha' || github.ref_name == 'staging' && 'staging') }}

          # Clone the repo using PAT
          git clone https://seguntokenmetrics:${{ secrets.GH_PAT }}@github.com/token-metrics/tokenmetrics-3.0.git
          cd tokenmetrics-3.0

          git config --local user.name "seguntokenmetrics"
          git config --local user.email "segun@tokenmetrics.com"

          # Update the tag
          sed -i "s/tag: .*/tag: ${TAG}/" ./helm/tm-app/helmvars/${BRANCH_NAME}/do-values.yaml

          git add ./helm/tm-app/helmvars/${BRANCH_NAME}/do-values.yaml
          git commit -m "Update image tag to ${TAG} [skip ci]"

          # Try to push, break if successful
          for i in {1..3}; do
            if git push origin ${{ github.ref_name }}; then
              break
            fi
            sleep 5
          done
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
  release-log:
    name: "Release Log"
    runs-on: ubuntu-latest-m
    needs: [docker-build-and-push]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Release Log
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-log.yaml
          disable-autolabeler: false
        env:
          GITHUB_TOKEN: ${{ secrets.ARGOCD_PAT }}